# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/acts", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Act. As you add validations to Act, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      name: "An act",
      active: true,
      description: "An act for test"
    }
  end

  let(:invalid_attributes) do
    {
      name: nil,
      active: 1,
      description: ""
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Act.create! valid_attributes
      get acts_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      act = Act.create! valid_attributes
      get act_url(act)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_act_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      act = Act.create! valid_attributes
      get edit_act_url(act)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Act" do
        expect do
          post acts_url, params: { act: valid_attributes }
        end.to change(Act, :count).by(1)
      end

      it "redirects to the created act" do
        post acts_url, params: { act: valid_attributes }
        expect(response).to redirect_to(act_url(Act.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Act" do
        expect do
          post acts_url, params: { act: invalid_attributes }
        end.not_to change(Act, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post acts_url, params: { act: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          name: "Foo",
          active: true,
          description: "Bar"
        }
      end

      it "updates the requested act" do
        act = Act.create! valid_attributes
        patch act_url(act), params: { act: new_attributes }
        act.reload

        expect(act.name).to eq new_attributes[:name]
      end

      it "redirects to the act" do
        act = Act.create! valid_attributes
        patch act_url(act), params: { act: new_attributes }
        act.reload
        expect(response).to redirect_to(act_url(act))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        act = Act.create! valid_attributes
        patch act_url(act), params: { act: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested act" do
      act = Act.create! valid_attributes
      expect do
        delete act_url(act)
      end.to change(Act, :count).by(-1)
    end

    it "redirects to the acts list" do
      act = Act.create! valid_attributes
      delete act_url(act)
      expect(response).to redirect_to(acts_url)
    end
  end
end
